{"name":"Shenchaoliang.GitHub.io","tagline":"中间件","body":"在官方文档上，这一部分是在路由的后面，但我想把它挪到前面来，这样更为合理。\r\n\r\n这是什么呢？\r\n\r\n我们知道，路由是一个过程，分析来自客户端的请求按照路由规则分发至相应的处理逻辑。但有种情况，打个比方：后台。后台不是所有人都能访问的，我们在正式的处理逻辑前，需要做一个验证，比如验证是否具有权限或者请求的数据是否合法。\r\n\r\n这时候，路由过程的一部分——中间件就上场了。\r\n\r\n\r\nHTTP 中间件提供一个方便的机制来过滤进入应用程序的 HTTP 请求，例如，Laravel 默认包含了一个中间件来检验用户身份验证，如果用户没有经过身份验证，中间件会将用户导向登录页面，然而，如果用户通过身份验证，中间件将会允许这个请求进一步继续前进。\r\n\r\n上述内容来自中文版的 laravel 5 文档，里面很好的说明了中间件的作用。在 laravel 5 以前的版本，只有过滤器（路由筛选器），目的和现在的中间件一样都是在请求到处理逻辑之间的一个中间过程，一般用作前置和后置的判断、验证。通过中间件我们可以在控制器里专注其本身的逻辑，就好比一个后台的控制器，我只需要专注于显示用户列表或者文章列表、去处理添加的文章等等，而不需要关注访问者是否是合法的后台管理员，验证权限的工作，应该交由中间件。通过中间件验证就会正常处理，不通过就会被重定向或者其他操作。\r\n\r\nLaravel默认已经内置了许多中间件，且默认开启。可以通过编辑app/Http/Kernel.php来决定是否启用这些中间件。自己开发的中间件也是在这里进行注册的哦。\r\n\r\n\r\napp/Http/Kernel.php 中的 $middleware 数组是全局中间件，也就是说，任何一条路由都会被应用这些中间件，比如里面的CSRF验证中间件。\r\n\r\n有时候我们不需要全局中间件，这时候可以将某一个中间件注册至 app/Http/Kernel.php 文件中的 $routeMiddleware 数组，数组的键名是中间件的别名，键值是具体的中间件类，如\r\n\r\n'auth' => 'App\\Http\\Middleware\\AuthMiddleware'。\r\n\r\n具体如何在某一路由上使用特定的中间件我们下文继续。\r\n\r\n我们在 app/Http/Kernel.php 文件中的 $routeMiddleware 数组注册了一个独立中间件，这一中间件可被单独用绑定在一个路由和路由组上。在路由定义的时候可以像这样：\r\n1.Route::get('admin/profile', ['middleware' => 'auth', function()\r\n2.{\r\n3.    //\r\n4.}]);\r\n\r\n\r\n当我们访问 http://yourdomain/admin/profile 的时候，首先会经过全局中间件，然后就是我们在 app/Http/Kernel.php 的 $routeMiddleware 数组中定义的名称为 auth 的中间件。\r\n\r\n说了这么多关于如何定义，那么中间件类里面应该是什么样的呢？看过文档的应该知道是这样的（下面的代码和文档里的有些区别哦）：\r\n1.<?php\r\n2.namespace App\\Http\\Middleware;\r\n3. \r\n4.use Closure;\r\n5.use Auth;\r\n6. \r\n7.class AuthMiddleware {\r\n8. \r\n9.    /**\r\n10.     * Run the request filter.\r\n11.     *\r\n12.     * @param  \\Illuminate\\Http\\Request  $request\r\n13.     * @param  \\Closure  $next\r\n14.     * @return mixed\r\n15.     */\r\n16.    public function handle($request, Closure $next)\r\n17.    {\r\n18.        // If the user is not logged in\r\n19.        if (Auth::guest()) {\r\n20.            if ($request->ajax()) {\r\n21.                return response('Unauthorized!', 401);\r\n22.            } else {\r\n23.                return redirect()->guest('admin/login');\r\n24.            }\r\n25.        }\r\n26. \r\n27.        view()->share('loign', true);\r\n28.        return $next($request);\r\n29.    }\r\n30. \r\n31.}\r\n\r\n\r\n上面这段代码是已经写好了的中间件，handle 方法里面的内容就是中间件实际的代码。\r\n\r\n\r\n我们看得出第 18~27 行代码大概是一个判断用户是否登陆的过程，如果没有登录，则判断请求是否是 ajax 类型的，ajax 类型的请求就返回一个表示“你丫的没权限”的 json 数据（理解一下就行），如果是标准的请求就重定向至登陆界面。\r\n\r\n如果在中间件中，通过了你的验证、或者前置的操作逻辑，记得通过代码 return $next($request)（上述例子中28行）将请求导向下一个中间件，如果后面没有中间件，就会到的处理逻辑（比如控制器等）。\r\n\r\n上述中间件是一个前置操作的中间件，什么意思呢？就是在作用在实际处理逻辑前的中间件，就是一个前置中间件。相反，当一个实际处理逻辑运行完以后通过的中间件，就是一个后置中间件。\r\n\r\n后置中间件结构如下：\r\n1.<?php\r\n2.namespace App\\Http\\Middleware;\r\n3. \r\n4.class AfterMiddleware implements Middleware {\r\n5. \r\n6.    public function handle($request, Closure $next)\r\n7.    {\r\n8.        $response = $next($request);\r\n9. \r\n10.        // 具体的中间件逻辑代码\r\n11. \r\n12.        return $response;\r\n13.    }\r\n14.}\r\n\r\n\r\n我们看得出，区别在于多了个 $response = $next($request)，返回值也变了。很好理解，$next($request) 返回的值是整个请求经过无数具体处理逻辑后产生的最终响应，这个响应一般是一堆 html 代码（渲染后的视图），也可能是一个 json 等等。我们可以在中间件里面对这个响应做最后加工处理，最后返回处理完的结果。\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}